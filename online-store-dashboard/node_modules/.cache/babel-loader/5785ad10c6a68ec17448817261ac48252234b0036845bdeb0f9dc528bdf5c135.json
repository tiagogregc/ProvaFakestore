{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nexport default {\n  name: \"DashboardPage\",\n  computed: {\n    // Obtém os dados do Vuex\n    totalProducts() {\n      return this.$store.state.products.length;\n    },\n    totalCategories() {\n      // Contar o número de categorias únicas (assumindo que as categorias estão armazenadas no campo 'category' dos produtos)\n      const categories = new Set(this.$store.state.products.map(product => product.category));\n      return categories.size;\n    },\n    totalOrders() {\n      return this.$store.state.orders.length;\n    },\n    totalUsers() {\n      return this.$store.state.users.length;\n    }\n  },\n  created() {\n    // Você pode buscar os dados da API se necessário, mas como já temos os dados no Vuex, não precisamos fazer isso aqui.\n    // Exemplo de como você faria isso se precisasse atualizar os dados:\n    // this.fetchDashboardData();\n  },\n  methods: {\n    // Se precisar de métodos para atualizar os dados (se não for pelo Vuex)\n    async fetchDashboardData() {\n      try {\n        // Realizar as requisições para preencher a store, caso não tenha sido feito antes\n        await Promise.all([this.$store.dispatch('fetchProducts'), this.$store.dispatch('fetchOrders'), this.$store.dispatch('fetchUsers')]);\n      } catch (error) {\n        console.error('Erro ao carregar os dados do dashboard:', error);\n        alert(\"Ocorreu um erro ao carregar os dados do dashboard.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","computed","totalProducts","$store","state","products","length","totalCategories","categories","Set","map","product","category","size","totalOrders","orders","totalUsers","users","created","methods","fetchDashboardData","Promise","all","dispatch","error","console","alert"],"sources":["C:\\Users\\tiago\\WebstormProjects\\FakestoreProva\\online-store-dashboard\\src\\views\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>Dashboard</h2>\r\n    <div class=\"dashboard-overview\">\r\n      <p>Total de Produtos: {{ totalProducts }}</p>\r\n      <p>Número de Categorias: {{ totalCategories }}</p>\r\n      <p>Quantidade de Pedidos: {{ totalOrders }}</p>\r\n      <p>Número Total de Usuários: {{ totalUsers }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DashboardPage\",\r\n  computed: {\r\n    // Obtém os dados do Vuex\r\n    totalProducts() {\r\n      return this.$store.state.products.length;\r\n    },\r\n    totalCategories() {\r\n      // Contar o número de categorias únicas (assumindo que as categorias estão armazenadas no campo 'category' dos produtos)\r\n      const categories = new Set(this.$store.state.products.map(product => product.category));\r\n      return categories.size;\r\n    },\r\n    totalOrders() {\r\n      return this.$store.state.orders.length;\r\n    },\r\n    totalUsers() {\r\n      return this.$store.state.users.length;\r\n    }\r\n  },\r\n  created() {\r\n    // Você pode buscar os dados da API se necessário, mas como já temos os dados no Vuex, não precisamos fazer isso aqui.\r\n    // Exemplo de como você faria isso se precisasse atualizar os dados:\r\n    // this.fetchDashboardData();\r\n  },\r\n  methods: {\r\n    // Se precisar de métodos para atualizar os dados (se não for pelo Vuex)\r\n    async fetchDashboardData() {\r\n      try {\r\n        // Realizar as requisições para preencher a store, caso não tenha sido feito antes\r\n        await Promise.all([\r\n          this.$store.dispatch('fetchProducts'),\r\n          this.$store.dispatch('fetchOrders'),\r\n          this.$store.dispatch('fetchUsers')\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar os dados do dashboard:', error);\r\n        alert(\"Ocorreu um erro ao carregar os dados do dashboard.\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding: 20px;\r\n}\r\n\r\nh2 {\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.dashboard-overview {\r\n  font-size: 18px;\r\n  line-height: 1.6;\r\n  background-color: #f5f5f5;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;AAaA,eAAe;EACbA,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAE;IACR;IACAC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACC,MAAM;IAC1C,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB;MACA,MAAMC,UAAS,GAAI,IAAIC,GAAG,CAAC,IAAI,CAACN,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACK,GAAG,CAACC,OAAM,IAAKA,OAAO,CAACC,QAAQ,CAAC,CAAC;MACvF,OAAOJ,UAAU,CAACK,IAAI;IACxB,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACX,MAAM,CAACC,KAAK,CAACW,MAAM,CAACT,MAAM;IACxC,CAAC;IACDU,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACb,MAAM,CAACC,KAAK,CAACa,KAAK,CAACX,MAAM;IACvC;EACF,CAAC;EACDY,OAAOA,CAAA,EAAG;IACR;IACA;IACA;EAAA,CACD;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF;QACA,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChB,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,eAAe,CAAC,EACrC,IAAI,CAACpB,MAAM,CAACoB,QAAQ,CAAC,aAAa,CAAC,EACnC,IAAI,CAACpB,MAAM,CAACoB,QAAQ,CAAC,YAAY,EAClC,CAAC;MACJ,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/DE,KAAK,CAAC,oDAAoD,CAAC;MAC7D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}