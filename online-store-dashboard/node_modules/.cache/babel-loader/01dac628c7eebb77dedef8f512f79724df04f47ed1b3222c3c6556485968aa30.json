{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { mapState } from 'vuex';\nimport UserTable from '@/components/UserTable.vue'; // Importando a tabela de usuários\n\nexport default {\n  components: {\n    UserTable\n  },\n  data() {\n    return {\n      userForm: {\n        id: null,\n        name: '',\n        email: '',\n        city: ''\n      },\n      editingUser: false,\n      cityFilter: '',\n      users: []\n    };\n  },\n  computed: {\n    ...mapState({\n      users: state => state.users // Acessando os usuários da Vuex Store\n    })\n  },\n  methods: {\n    fetchUsers() {\n      this.users = this.$store.getters.getUsers; // Obtendo os usuários da store\n    },\n    applyFilters() {\n      this.users = this.$store.getters.getUsers.filter(user => {\n        return !this.cityFilter || user.city === this.cityFilter;\n      });\n    },\n    deleteUser(userId) {\n      this.$store.dispatch('removeUser', userId); // Ação para remover o usuário\n      this.fetchUsers(); // Recarrega os usuários após exclusão\n    },\n    editUser(user) {\n      this.userForm = {\n        ...user\n      }; // Preenche o formulário com os dados do usuário\n      this.editingUser = true; // Ativa o modo de edição\n    },\n    saveUser() {\n      if (this.editingUser) {\n        this.$store.dispatch('updateUser', this.userForm); // Atualiza o usuário\n      } else {\n        const newUser = {\n          ...this.userForm\n        };\n        newUser.id = Date.now(); // ID único temporário\n        this.$store.dispatch('addUser', newUser); // Adiciona um novo usuário\n      }\n      this.cancelEditing();\n      this.fetchUsers(); // Recarrega os usuários após salvar\n    },\n    cancelEditing() {\n      this.userForm = {\n        id: null,\n        name: '',\n        email: '',\n        city: ''\n      }; // Limpa o formulário\n      this.editingUser = false; // Desativa o modo de edição\n    }\n  },\n  mounted() {\n    this.fetchUsers(); // Carrega os usuários ao montar o componente\n  }\n};","map":{"version":3,"names":["mapState","UserTable","components","data","userForm","id","name","email","city","editingUser","cityFilter","users","computed","state","methods","fetchUsers","$store","getters","getUsers","applyFilters","filter","user","deleteUser","userId","dispatch","editUser","saveUser","newUser","Date","now","cancelEditing","mounted"],"sources":["C:\\Users\\tiago\\WebstormProjects\\FakestoreS\\online-store-dashboard\\src\\views\\UserList.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>Gestão de Usuários</h2>\r\n\r\n    <!-- Formulário de Adicionar/Editar Usuários -->\r\n    <div class=\"form-container\">\r\n      <h3 class=\"form-title\">{{ editingUser ? \"Editar Usuário\" : \"Adicionar Usuário\" }}</h3>\r\n\r\n      <form @submit.prevent=\"saveUser\">\r\n        <!-- Nome do Usuário -->\r\n        <div class=\"form-group\">\r\n          <label for=\"user-name\">Nome do Usuário</label>\r\n          <input\r\n              id=\"user-name\"\r\n              type=\"text\"\r\n              v-model=\"userForm.name\"\r\n              placeholder=\"Digite o nome do usuário\"\r\n              required\r\n          />\r\n        </div>\r\n\r\n        <!-- Email -->\r\n        <div class=\"form-group\">\r\n          <label for=\"user-email\">Email</label>\r\n          <input\r\n              id=\"user-email\"\r\n              type=\"email\"\r\n              v-model=\"userForm.email\"\r\n              placeholder=\"Digite o email\"\r\n              required\r\n          />\r\n        </div>\r\n\r\n        <!-- Cidade -->\r\n        <div class=\"form-group\">\r\n          <label for=\"user-city\">Cidade</label>\r\n          <input\r\n              id=\"user-city\"\r\n              type=\"text\"\r\n              v-model=\"userForm.city\"\r\n              placeholder=\"Digite a cidade\"\r\n              required\r\n          />\r\n        </div>\r\n\r\n        <!-- Botões -->\r\n        <div class=\"form-buttons\">\r\n          <button type=\"submit\" class=\"btn btn-blue\">\r\n            {{ editingUser ? \"Atualizar Usuário\" : \"Adicionar Usuário\" }}\r\n          </button>\r\n          <button type=\"button\" class=\"btn btn-red\" @click=\"cancelEditing\">\r\n            Cancelar\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Tabela de Usuários -->\r\n    <UserTable :users=\"users\" @editUser=\"editUser\" @deleteUser=\"deleteUser\" />\r\n\r\n    <!-- Filtros -->\r\n    <div class=\"filters\">\r\n      <div class=\"filter-group\">\r\n        <label for=\"city-filter\">Filtrar por Cidade</label>\r\n        <select id=\"city-filter\" v-model=\"cityFilter\" @change=\"applyFilters\">\r\n          <option value=\"\">Todas as Cidades</option>\r\n          <option value=\"São Paulo\">São Paulo</option>\r\n          <option value=\"Rio de Janeiro\">Rio de Janeiro</option>\r\n          <option value=\"Belo Horizonte\">Belo Horizonte</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex';\r\nimport UserTable from '@/components/UserTable.vue'; // Importando a tabela de usuários\r\n\r\nexport default {\r\n  components: {\r\n    UserTable,\r\n  },\r\n  data() {\r\n    return {\r\n      userForm: {\r\n        id: null,\r\n        name: '',\r\n        email: '',\r\n        city: '',\r\n      },\r\n      editingUser: false,\r\n      cityFilter: '',\r\n      users: [],\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      users: (state) => state.users, // Acessando os usuários da Vuex Store\r\n    }),\r\n  },\r\n  methods: {\r\n    fetchUsers() {\r\n      this.users = this.$store.getters.getUsers; // Obtendo os usuários da store\r\n    },\r\n    applyFilters() {\r\n      this.users = this.$store.getters.getUsers.filter((user) => {\r\n        return !this.cityFilter || user.city === this.cityFilter;\r\n      });\r\n    },\r\n    deleteUser(userId) {\r\n      this.$store.dispatch('removeUser', userId); // Ação para remover o usuário\r\n      this.fetchUsers(); // Recarrega os usuários após exclusão\r\n    },\r\n    editUser(user) {\r\n      this.userForm = { ...user }; // Preenche o formulário com os dados do usuário\r\n      this.editingUser = true; // Ativa o modo de edição\r\n    },\r\n    saveUser() {\r\n      if (this.editingUser) {\r\n        this.$store.dispatch('updateUser', this.userForm); // Atualiza o usuário\r\n      } else {\r\n        const newUser = {...this.userForm};\r\n        newUser.id = Date.now(); // ID único temporário\r\n        this.$store.dispatch('addUser', newUser); // Adiciona um novo usuário\r\n      }\r\n      this.cancelEditing();\r\n      this.fetchUsers(); // Recarrega os usuários após salvar\r\n    },\r\n    cancelEditing() {\r\n      this.userForm = {id: null, name: '', email: '', city: ''}; // Limpa o formulário\r\n      this.editingUser = false; // Desativa o modo de edição\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchUsers(); // Carrega os usuários ao montar o componente\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.filters {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.filter-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\nth,\r\ntd {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.form-container {\r\n  margin-bottom: 30px;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n}\r\n\r\n.form-title {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\ninput,\r\nselect {\r\n  padding: 8px;\r\n  width: 100%;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.form-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.btn {\r\n  padding: 8px 12px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-blue {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n}\r\n\r\n.btn-red {\r\n  background-color: #dc3545;\r\n  color: #fff;\r\n}\r\n\r\n.btn {\r\n  min-width: 80px;\r\n}\r\n\r\n.btn:hover {\r\n  opacity: 0.9;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>"],"mappings":";;AA6EA,SAASA,QAAO,QAAS,MAAM;AAC/B,OAAOC,SAAQ,MAAO,4BAA4B,EAAE;;AAEpD,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;MACDC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGZ,QAAQ,CAAC;MACVW,KAAK,EAAGE,KAAK,IAAKA,KAAK,CAACF,KAAK,CAAE;IACjC,CAAC;EACH,CAAC;EACDG,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACJ,KAAI,GAAI,IAAI,CAACK,MAAM,CAACC,OAAO,CAACC,QAAQ,EAAE;IAC7C,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACR,KAAI,GAAI,IAAI,CAACK,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACE,MAAM,CAAEC,IAAI,IAAK;QACzD,OAAO,CAAC,IAAI,CAACX,UAAS,IAAKW,IAAI,CAACb,IAAG,KAAM,IAAI,CAACE,UAAU;MAC1D,CAAC,CAAC;IACJ,CAAC;IACDY,UAAUA,CAACC,MAAM,EAAE;MACjB,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,YAAY,EAAED,MAAM,CAAC,EAAE;MAC5C,IAAI,CAACR,UAAU,CAAC,CAAC,EAAE;IACrB,CAAC;IACDU,QAAQA,CAACJ,IAAI,EAAE;MACb,IAAI,CAACjB,QAAO,GAAI;QAAE,GAAGiB;MAAK,CAAC,EAAE;MAC7B,IAAI,CAACZ,WAAU,GAAI,IAAI,EAAE;IAC3B,CAAC;IACDiB,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACjB,WAAW,EAAE;QACpB,IAAI,CAACO,MAAM,CAACQ,QAAQ,CAAC,YAAY,EAAE,IAAI,CAACpB,QAAQ,CAAC,EAAE;MACrD,OAAO;QACL,MAAMuB,OAAM,GAAI;UAAC,GAAG,IAAI,CAACvB;QAAQ,CAAC;QAClCuB,OAAO,CAACtB,EAAC,GAAIuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACzB,IAAI,CAACb,MAAM,CAACQ,QAAQ,CAAC,SAAS,EAAEG,OAAO,CAAC,EAAE;MAC5C;MACA,IAAI,CAACG,aAAa,CAAC,CAAC;MACpB,IAAI,CAACf,UAAU,CAAC,CAAC,EAAE;IACrB,CAAC;IACDe,aAAaA,CAAA,EAAG;MACd,IAAI,CAAC1B,QAAO,GAAI;QAACC,EAAE,EAAE,IAAI;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAE,CAAC,EAAE;MAC3D,IAAI,CAACC,WAAU,GAAI,KAAK,EAAE;IAC5B;EACF,CAAC;EACDsB,OAAOA,CAAA,EAAG;IACR,IAAI,CAAChB,UAAU,CAAC,CAAC,EAAE;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}