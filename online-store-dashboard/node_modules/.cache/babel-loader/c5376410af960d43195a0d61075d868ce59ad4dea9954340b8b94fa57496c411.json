{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-overview\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Dashboard\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Total de Produtos: \" + _toDisplayString($options.totalProducts), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Número de Categorias: \" + _toDisplayString($options.totalCategories), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Quantidade de Pedidos: \" + _toDisplayString($options.totalOrders), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Número Total de Usuários: \" + _toDisplayString($options.totalUsers), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$options","totalProducts","totalCategories","totalOrders","totalUsers"],"sources":["C:\\Users\\tiago\\WebstormProjects\\FakestoreProva\\online-store-dashboard\\src\\views\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>Dashboard</h2>\r\n    <div class=\"dashboard-overview\">\r\n      <p>Total de Produtos: {{ totalProducts }}</p>\r\n      <p>Número de Categorias: {{ totalCategories }}</p>\r\n      <p>Quantidade de Pedidos: {{ totalOrders }}</p>\r\n      <p>Número Total de Usuários: {{ totalUsers }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"DashboardPage\",\r\n  computed: {\r\n    // Obtém os dados do Vuex\r\n    totalProducts() {\r\n      return this.$store.state.products.length;\r\n    },\r\n    totalCategories() {\r\n      // Contar o número de categorias únicas (assumindo que as categorias estão armazenadas no campo 'category' dos produtos)\r\n      const categories = new Set(this.$store.state.products.map(product => product.category));\r\n      return categories.size;\r\n    },\r\n    totalOrders() {\r\n      return this.$store.state.orders.length;\r\n    },\r\n    totalUsers() {\r\n      return this.$store.state.users.length;\r\n    }\r\n  },\r\n  created() {\r\n    // Você pode buscar os dados da API se necessário, mas como já temos os dados no Vuex, não precisamos fazer isso aqui.\r\n    // Exemplo de como você faria isso se precisasse atualizar os dados:\r\n    // this.fetchDashboardData();\r\n  },\r\n  methods: {\r\n    // Se precisar de métodos para atualizar os dados (se não for pelo Vuex)\r\n    async fetchDashboardData() {\r\n      try {\r\n        // Realizar as requisições para preencher a store, caso não tenha sido feito antes\r\n        await Promise.all([\r\n          this.$store.dispatch('fetchProducts'),\r\n          this.$store.dispatch('fetchOrders'),\r\n          this.$store.dispatch('fetchUsers')\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar os dados do dashboard:', error);\r\n        alert(\"Ocorreu um erro ao carregar os dados do dashboard.\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding: 20px;\r\n}\r\n\r\nh2 {\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.dashboard-overview {\r\n  font-size: 18px;\r\n  line-height: 1.6;\r\n  background-color: #f5f5f5;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAoB;;uBAFjCC,mBAAA,CAQM,OARNC,UAQM,G,0BAPJC,mBAAA,CAAkB,YAAd,WAAS,sBACbA,mBAAA,CAKM,OALNC,UAKM,GAJJD,mBAAA,CAA6C,WAA1C,qBAAmB,GAAAE,gBAAA,CAAGC,QAAA,CAAAC,aAAa,kBACtCJ,mBAAA,CAAkD,WAA/C,wBAAsB,GAAAE,gBAAA,CAAGC,QAAA,CAAAE,eAAe,kBAC3CL,mBAAA,CAA+C,WAA5C,yBAAuB,GAAAE,gBAAA,CAAGC,QAAA,CAAAG,WAAW,kBACxCN,mBAAA,CAAiD,WAA9C,4BAA0B,GAAAE,gBAAA,CAAGC,QAAA,CAAAI,UAAU,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}