{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nexport default {\n  name: 'OrderDetailsModal',\n  props: {\n    order: {\n      type: Object,\n      required: true\n    },\n    user: {\n      type: Object,\n      required: true\n    },\n    products: {\n      type: Array,\n      required: true\n    },\n    users: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      localOrder: JSON.parse(JSON.stringify(this.order)) // Faz uma cópia profunda do pedido\n    };\n  },\n  methods: {\n    updateOrderDetails() {\n      this.$emit('updateOrder', this.localOrder);\n      this.$emit('close');\n    },\n    addProductField() {\n      this.localOrder.products.push({\n        productId: '',\n        productName: '',\n        quantity: 1\n      });\n    },\n    removeProduct(index) {\n      this.localOrder.products.splice(index, 1);\n    },\n    getProductPrice(productId) {\n      const product = this.products.find(p => p.id === productId);\n      return product ? product.price : 0;\n    },\n    calculateOrderTotal(products) {\n      return products.reduce((total, product) => total + product.quantity * this.getProductPrice(product.productId), 0);\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL'\n      }).format(value);\n    }\n  }\n};","map":{"version":3,"names":["name","props","order","type","Object","required","user","products","Array","users","data","localOrder","JSON","parse","stringify","methods","updateOrderDetails","$emit","addProductField","push","productId","productName","quantity","removeProduct","index","splice","getProductPrice","product","find","p","id","price","calculateOrderTotal","reduce","total","formatCurrency","value","Intl","NumberFormat","style","currency","format"],"sources":["C:\\Users\\tiago\\WebstormProjects\\FakestoreS\\online-store-dashboard\\src\\components\\OrderDetailsModal.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-details-modal\">\r\n    <div class=\"modal-content\">\r\n      <h3 class=\"modal-title\">Detalhes do Pedido</h3>\r\n      <form @submit.prevent=\"updateOrderDetails\">\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th>ID Pedido</th>\r\n            <th>Data e Hora</th>\r\n            <th>Vendedor</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr>\r\n            <td>{{ localOrder.id }}</td>\r\n            <td>{{ localOrder.date }}</td>\r\n            <td>\r\n              <select v-model=\"localOrder.userId\" class=\"modal-subtitle\" required>\r\n                <option v-for=\"user in users\" :key=\"user.id\" :value=\"user.id\">\r\n                  {{ user.name.firstname }} {{ user.name.lastname }}\r\n                </option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <h4>Produtos no Pedido</h4>\r\n        <table>\r\n          <thead>\r\n          <tr>\r\n            <th>Nome do Produto</th>\r\n            <th>Quantidade</th>\r\n            <th>Valor Unitário</th>\r\n            <th>Valor Produto</th>\r\n            <th>Ações</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr v-for=\"(product, index) in localOrder.products\" :key=\"index\">\r\n            <td>\r\n              <select v-model=\"product.productId\" required>\r\n                <option v-for=\"prod in products\" :key=\"prod.id\" :value=\"prod.id\">\r\n                  {{ prod.title }}\r\n                </option>\r\n              </select>\r\n            </td>\r\n            <td>\r\n              <input type=\"number\" v-model=\"product.quantity\" min=\"1\" />\r\n            </td>\r\n            <td>\r\n              {{ formatCurrency(getProductPrice(product.productId)) }}\r\n            </td>\r\n            <td>\r\n              {{ formatCurrency(product.quantity * getProductPrice(product.productId)) }}\r\n            </td>\r\n            <td>\r\n              <button type=\"button\" @click=\"removeProduct(index)\">Remover</button>\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <div class=\"order-total\">\r\n          <strong>Valor Total do Pedido: {{ formatCurrency(calculateOrderTotal(localOrder.products)) }}</strong>\r\n        </div>\r\n\r\n        <button type=\"button\" @click=\"addProductField\">Adicionar Produto</button>\r\n        <div class=\"modal-buttons\">\r\n          <button type=\"submit\" class=\"save-button\">Atualizar Pedido</button>\r\n          <button type=\"button\" class=\"cancel-button\" @click=\"$emit('close')\">Cancelar</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'OrderDetailsModal',\r\n  props: {\r\n    order: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    user: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    products: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    users: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      localOrder: JSON.parse(JSON.stringify(this.order)), // Faz uma cópia profunda do pedido\r\n    };\r\n  },\r\n  methods: {\r\n    updateOrderDetails() {\r\n      this.$emit('updateOrder', this.localOrder);\r\n      this.$emit('close');\r\n    },\r\n    addProductField() {\r\n      this.localOrder.products.push({ productId: '', productName: '', quantity: 1 });\r\n    },\r\n    removeProduct(index) {\r\n      this.localOrder.products.splice(index, 1);\r\n    },\r\n    getProductPrice(productId) {\r\n      const product = this.products.find(p => p.id === productId);\r\n      return product ? product.price : 0;\r\n    },\r\n    calculateOrderTotal(products) {\r\n      return products.reduce((total, product) => total + (product.quantity * this.getProductPrice(product.productId)), 0);\r\n    },\r\n    formatCurrency(value) {\r\n      return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.order-details-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  max-width: 1400px; /* Aumenta o tamanho do modal */\r\n  width: 100%;\r\n  margin: auto; /* Centraliza o modal verticalmente */\r\n  display: flex;\r\n  flex-direction: column; /* Garante que o conteúdo do modal seja empilhado verticalmente */\r\n  align-items: center; /* Centraliza o conteúdo do modal horizontalmente */\r\n}\r\n\r\n.modal-title {\r\n  font-size: 28px; /* Aumenta a fonte do título */\r\n  margin-bottom: 20px; /* Adiciona margem inferior */\r\n}\r\n\r\n.modal-subtitle {\r\n  font-size: 20px; /* Aumenta a fonte do subtítulo */\r\n  margin-bottom: 20px; /* Adiciona margem inferior */\r\n  display: block;\r\n}\r\n\r\nselect {\r\n  font-size: 18px; /* Diminui a fonte da dropbox */\r\n}\r\n\r\n.modal-buttons {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%; /* Garante que os botões ocupem a largura total do modal */\r\n  margin-top: 20px;\r\n}\r\n\r\n.save-button {\r\n  background-color: #3498db;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\n.cancel-button {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\n.cancel-button:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n.order-total {\r\n  margin-top: 20px;\r\n  font-size: 1.2em;\r\n  text-align: right;\r\n}\r\n</style>"],"mappings":";;;;AA+EA,eAAe;EACbA,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAE;MACJH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDE,QAAQ,EAAE;MACRJ,IAAI,EAAEK,KAAK;MACXH,QAAQ,EAAE;IACZ,CAAC;IACDI,KAAK,EAAE;MACLN,IAAI,EAAEK,KAAK;MACXH,QAAQ,EAAE;IACZ;EACF,CAAC;EACDK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAE;IACtD,CAAC;EACH,CAAC;EACDa,OAAO,EAAE;IACPC,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAACC,KAAK,CAAC,aAAa,EAAE,IAAI,CAACN,UAAU,CAAC;MAC1C,IAAI,CAACM,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACP,UAAU,CAACJ,QAAQ,CAACY,IAAI,CAAC;QAAEC,SAAS,EAAE,EAAE;QAAEC,WAAW,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAE,CAAC,CAAC;IAChF,CAAC;IACDC,aAAaA,CAACC,KAAK,EAAE;MACnB,IAAI,CAACb,UAAU,CAACJ,QAAQ,CAACkB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAC3C,CAAC;IACDE,eAAeA,CAACN,SAAS,EAAE;MACzB,MAAMO,OAAM,GAAI,IAAI,CAACpB,QAAQ,CAACqB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMV,SAAS,CAAC;MAC3D,OAAOO,OAAM,GAAIA,OAAO,CAACI,KAAI,GAAI,CAAC;IACpC,CAAC;IACDC,mBAAmBA,CAACzB,QAAQ,EAAE;MAC5B,OAAOA,QAAQ,CAAC0B,MAAM,CAAC,CAACC,KAAK,EAAEP,OAAO,KAAKO,KAAI,GAAKP,OAAO,CAACL,QAAO,GAAI,IAAI,CAACI,eAAe,CAACC,OAAO,CAACP,SAAS,CAAE,EAAE,CAAC,CAAC;IACrH,CAAC;IACDe,cAAcA,CAACC,KAAK,EAAE;MACpB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;IAC7F;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}