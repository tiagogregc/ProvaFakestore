{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    products: [],\n    // Armazenamento dos produtos\n    orders: [],\n    users: [],\n    authToken: localStorage.getItem('authToken') || null // Armazenamento do token de autenticação\n  },\n  mutations: {\n    setProducts(state, products) {\n      state.products = products; // Atualiza a lista de produtos\n    },\n    addProduct(state, product) {\n      state.products.push(product); // Adiciona um novo produto\n    },\n    removeProduct(state, productId) {\n      state.products = state.products.filter(product => product.id !== productId); // Remove o produto pelo ID\n    },\n    updateProduct(state, updatedProduct) {\n      const index = state.products.findIndex(product => product.id === updatedProduct.id);\n      if (index !== -1) {\n        state.products.splice(index, 1, updatedProduct); // Atualiza um produto existente\n      }\n    },\n    setOrders(state, orders) {\n      state.orders = orders; // Atualiza os pedidos\n    },\n    setUsers(state, users) {\n      state.users = users; // Atualiza os usuários\n    },\n    setAuthToken(state, token) {\n      state.authToken = token;\n      if (token) {\n        localStorage.setItem('authToken', token); // Armazena o token no localStorage\n      } else {\n        localStorage.removeItem('authToken'); // Remove o token do localStorage se for nulo\n      }\n    }\n  },\n  actions: {\n    async fetchProducts({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://fakestoreapi.com/products');\n        commit('setProducts', response.data); // Salva os produtos no Vuex\n      } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n      }\n    },\n    async fetchOrders({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://fakestoreapi.com/carts');\n        commit('setOrders', response.data); // Salva os pedidos no Vuex\n      } catch (error) {\n        console.error('Erro ao buscar pedidos:', error);\n      }\n    },\n    async fetchUsers({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://fakestoreapi.com/users');\n        commit('setUsers', response.data); // Salva os usuários no Vuex\n      } catch (error) {\n        console.error('Erro ao buscar usuários:', error);\n      }\n    },\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('https://fakestoreapi.com/auth/login', credentials);\n        commit('setAuthToken', response.data.token); // Armazena o token no Vuex\n      } catch (error) {\n        console.error('Erro no login:', error);\n      }\n    },\n    logout({\n      commit\n    }) {\n      commit('setAuthToken', null); // Remove o token do Vuex\n    },\n    addProduct({\n      commit\n    }, product) {\n      commit('addProduct', product); // Chama a mutação para adicionar um novo produto\n    },\n    removeProduct({\n      commit\n    }, productId) {\n      commit('removeProduct', productId); // Chama a mutação para remover o produto\n    },\n    updateProduct({\n      commit\n    }, updatedProduct) {\n      commit('updateProduct', updatedProduct); // Chama a mutação para atualizar o produto\n    }\n  },\n  getters: {\n    isAuthenticated(state) {\n      return !!state.authToken; // Retorna verdadeiro se houver um token\n    },\n    getAllProducts(state) {\n      return state.products; // Retorna todos os produtos\n    },\n    getProductById: state => id => {\n      return state.products.find(product => product.id === id); // Retorna um produto pelo ID\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","products","orders","users","authToken","localStorage","getItem","mutations","setProducts","addProduct","product","push","removeProduct","productId","filter","id","updateProduct","updatedProduct","index","findIndex","splice","setOrders","setUsers","setAuthToken","token","setItem","removeItem","actions","fetchProducts","commit","response","get","data","error","console","fetchOrders","fetchUsers","login","credentials","post","logout","getters","isAuthenticated","getAllProducts","getProductById","find"],"sources":["C:/Users/tiago/WebstormProjects/FakestoreS/online-store-dashboard/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nexport default createStore({\r\n    state: {\r\n        products: [], // Armazenamento dos produtos\r\n        orders: [],\r\n        users: [],\r\n        authToken: localStorage.getItem('authToken') || null, // Armazenamento do token de autenticação\r\n    },\r\n    mutations: {\r\n        setProducts(state, products) {\r\n            state.products = products; // Atualiza a lista de produtos\r\n        },\r\n        addProduct(state, product) {\r\n            state.products.push(product); // Adiciona um novo produto\r\n        },\r\n        removeProduct(state, productId) {\r\n            state.products = state.products.filter(product => product.id !== productId); // Remove o produto pelo ID\r\n        },\r\n        updateProduct(state, updatedProduct) {\r\n            const index = state.products.findIndex(product => product.id === updatedProduct.id);\r\n            if (index !== -1) {\r\n                state.products.splice(index, 1, updatedProduct); // Atualiza um produto existente\r\n            }\r\n        },\r\n        setOrders(state, orders) {\r\n            state.orders = orders; // Atualiza os pedidos\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users; // Atualiza os usuários\r\n        },\r\n        setAuthToken(state, token) {\r\n            state.authToken = token;\r\n            if (token) {\r\n                localStorage.setItem('authToken', token); // Armazena o token no localStorage\r\n            } else {\r\n                localStorage.removeItem('authToken'); // Remove o token do localStorage se for nulo\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        async fetchProducts({ commit }) {\r\n            try {\r\n                const response = await axios.get('https://fakestoreapi.com/products');\r\n                commit('setProducts', response.data); // Salva os produtos no Vuex\r\n            } catch (error) {\r\n                console.error('Erro ao buscar produtos:', error);\r\n            }\r\n        },\r\n        async fetchOrders({ commit }) {\r\n            try {\r\n                const response = await axios.get('https://fakestoreapi.com/carts');\r\n                commit('setOrders', response.data); // Salva os pedidos no Vuex\r\n            } catch (error) {\r\n                console.error('Erro ao buscar pedidos:', error);\r\n            }\r\n        },\r\n        async fetchUsers({ commit }) {\r\n            try {\r\n                const response = await axios.get('https://fakestoreapi.com/users');\r\n                commit('setUsers', response.data); // Salva os usuários no Vuex\r\n            } catch (error) {\r\n                console.error('Erro ao buscar usuários:', error);\r\n            }\r\n        },\r\n        async login({ commit }, credentials) {\r\n            try {\r\n                const response = await axios.post('https://fakestoreapi.com/auth/login', credentials);\r\n                commit('setAuthToken', response.data.token); // Armazena o token no Vuex\r\n            } catch (error) {\r\n                console.error('Erro no login:', error);\r\n            }\r\n        },\r\n        logout({ commit }) {\r\n            commit('setAuthToken', null); // Remove o token do Vuex\r\n        },\r\n        addProduct({ commit }, product) {\r\n            commit('addProduct', product); // Chama a mutação para adicionar um novo produto\r\n        },\r\n        removeProduct({ commit }, productId) {\r\n            commit('removeProduct', productId); // Chama a mutação para remover o produto\r\n        },\r\n        updateProduct({ commit }, updatedProduct) {\r\n            commit('updateProduct', updatedProduct); // Chama a mutação para atualizar o produto\r\n        },\r\n    },\r\n    getters: {\r\n        isAuthenticated(state) {\r\n            return !!state.authToken; // Retorna verdadeiro se houver um token\r\n        },\r\n        getAllProducts(state) {\r\n            return state.products; // Retorna todos os produtos\r\n        },\r\n        getProductById: (state) => (id) => {\r\n            return state.products.find(product => product.id === id); // Retorna um produto pelo ID\r\n        },\r\n    },\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}