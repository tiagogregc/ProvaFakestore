{"ast":null,"code":"// src/router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\nimport Dashboard from '../views/DashboardPage.vue';\nimport Products from '../views/ProductList.vue';\nimport Orders from '../views/OrdersList.vue';\nimport Users from '../views/UserList.vue';\nimport Login from '../views/UserLogin.vue';\n\n// Defina as rotas do aplicativo\nconst routes = [{\n  path: '/',\n  // Rota para login\n  name: 'UserLogin',\n  component: Login\n}, {\n  path: '/Dashboard',\n  // Rota para o Dashboard após login\n  name: 'DashboardPage',\n  component: Dashboard,\n  meta: {\n    requiresAuth: true\n  } // Requer autenticação\n}, {\n  path: '/Products',\n  // Corrigido para 'products' (letras minúsculas)\n  name: 'ProductList',\n  component: Products,\n  meta: {\n    requiresAuth: true\n  } // Requer autenticação\n}, {\n  path: '/Orders',\n  // Corrigido para 'orders' (letras minúsculas)\n  name: 'OrderList',\n  component: Orders,\n  meta: {\n    requiresAuth: true\n  } // Requer autenticação\n}, {\n  path: '/Users',\n  // Corrigido para 'users' (letras minúsculas)\n  name: 'UserList',\n  component: Users,\n  meta: {\n    requiresAuth: true\n  } // Requer autenticação\n}];\n\n// Criação do router\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Adicione o \"beforeEach\" para proteger rotas\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = !!localStorage.getItem('authToken'); // Verifica se o token está armazenado\n\n  // Se a rota requer autenticação e o usuário não está autenticado, redireciona para login\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    next({\n      name: 'UserLogin'\n    }); // Corrigido para 'UserLogin'\n  } else if (to.name === 'UserLogin' && isAuthenticated) {\n    // Se o usuário estiver autenticado e tentar acessar a página de login, redireciona para o Dashboard\n    next({\n      name: 'DashboardPage'\n    }); // Corrigido para 'DashboardPage'\n  } else {\n    next(); // Permite a navegação se o usuário estiver autenticado ou a rota não precisar de autenticação\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Dashboard","Products","Orders","Users","Login","routes","path","name","component","meta","requiresAuth","router","history","beforeEach","to","from","next","isAuthenticated","localStorage","getItem"],"sources":["C:/Users/tiago/WebstormProjects/FakestoreS/online-store-dashboard/src/router/index.js"],"sourcesContent":["// src/router/index.js\r\nimport { createRouter, createWebHistory } from 'vue-router';\r\nimport Dashboard from '../views/DashboardPage.vue';\r\nimport Products from '../views/ProductList.vue';\r\nimport Orders from '../views/OrdersList.vue';\r\nimport Users from '../views/UserList.vue';\r\nimport Login from '../views/UserLogin.vue';\r\n\r\n// Defina as rotas do aplicativo\r\nconst routes = [\r\n    {\r\n        path: '/', // Rota para login\r\n        name: 'UserLogin',\r\n        component: Login,\r\n    },\r\n    {\r\n        path: '/Dashboard', // Rota para o Dashboard após login\r\n        name: 'DashboardPage',\r\n        component: Dashboard,\r\n        meta: { requiresAuth: true }, // Requer autenticação\r\n    },\r\n    {\r\n        path: '/Products', // Corrigido para 'products' (letras minúsculas)\r\n        name: 'ProductList',\r\n        component: Products,\r\n        meta: { requiresAuth: true }, // Requer autenticação\r\n    },\r\n    {\r\n        path: '/Orders', // Corrigido para 'orders' (letras minúsculas)\r\n        name: 'OrderList',\r\n        component: Orders,\r\n        meta: { requiresAuth: true }, // Requer autenticação\r\n    },\r\n    {\r\n        path: '/Users', // Corrigido para 'users' (letras minúsculas)\r\n        name: 'UserList',\r\n        component: Users,\r\n        meta: { requiresAuth: true }, // Requer autenticação\r\n    },\r\n];\r\n\r\n// Criação do router\r\nconst router = createRouter({\r\n    history: createWebHistory(),\r\n    routes,\r\n});\r\n\r\n// Adicione o \"beforeEach\" para proteger rotas\r\nrouter.beforeEach((to, from, next) => {\r\n    const isAuthenticated = !!localStorage.getItem('authToken'); // Verifica se o token está armazenado\r\n\r\n    // Se a rota requer autenticação e o usuário não está autenticado, redireciona para login\r\n    if (to.meta.requiresAuth && !isAuthenticated) {\r\n        next({ name: 'UserLogin' }); // Corrigido para 'UserLogin'\r\n    } else if (to.name === 'UserLogin' && isAuthenticated) {\r\n        // Se o usuário estiver autenticado e tentar acessar a página de login, redireciona para o Dashboard\r\n        next({ name: 'DashboardPage' }); // Corrigido para 'DashboardPage'\r\n    } else {\r\n        next(); // Permite a navegação se o usuário estiver autenticado ou a rota não precisar de autenticação\r\n    }\r\n});\r\n\r\nexport default router;"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,wBAAwB;;AAE1C;AACA,MAAMC,MAAM,GAAG,CACX;EACIC,IAAI,EAAE,GAAG;EAAE;EACXC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEJ;AACf,CAAC,EACD;EACIE,IAAI,EAAE,YAAY;EAAE;EACpBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAER,SAAS;EACpBS,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAClC,CAAC,EACD;EACIJ,IAAI,EAAE,WAAW;EAAE;EACnBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEP,QAAQ;EACnBQ,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAClC,CAAC,EACD;EACIJ,IAAI,EAAE,SAAS;EAAE;EACjBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEN,MAAM;EACjBO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAClC,CAAC,EACD;EACIJ,IAAI,EAAE,QAAQ;EAAE;EAChBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEL,KAAK;EAChBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAClC,CAAC,CACJ;;AAED;AACA,MAAMC,MAAM,GAAGb,YAAY,CAAC;EACxBc,OAAO,EAAEb,gBAAgB,CAAC,CAAC;EAC3BM;AACJ,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMC,eAAe,GAAG,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;EAE7D;EACA,IAAIL,EAAE,CAACL,IAAI,CAACC,YAAY,IAAI,CAACO,eAAe,EAAE;IAC1CD,IAAI,CAAC;MAAET,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC,MAAM,IAAIO,EAAE,CAACP,IAAI,KAAK,WAAW,IAAIU,eAAe,EAAE;IACnD;IACAD,IAAI,CAAC;MAAET,IAAI,EAAE;IAAgB,CAAC,CAAC,CAAC,CAAC;EACrC,CAAC,MAAM;IACHS,IAAI,CAAC,CAAC,CAAC,CAAC;EACZ;AACJ,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}